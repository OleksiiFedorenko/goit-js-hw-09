{"mappings":"oeAAAA,EAAA,SAEgBC,SAASC,cAAc,SAC/BC,iBAAiB,UAEzB,SAAkBC,GAChBA,EAAIC,iBAEJ,MAAMC,MAAEA,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAAIK,cAAcC,SAClDC,QAAQC,IAAIN,EAAMO,MAAON,EAAKM,MAAOL,EAAOK,OAC5C,MAAMC,EAAM,IAAIC,MAAMC,OAAOR,EAAOK,QACjCI,KAAKD,OAAOV,EAAMO,QAClBK,KAAI,CAACC,EAAGC,EAAGC,IAAOD,EAAIC,EAAED,EAAI,GAAKJ,OAAOT,EAAKM,OAASM,IACzDR,QAAQC,IAAIE,GAEZV,EAAIK,cAAca,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formRef = document.querySelector('.form');\nformRef.addEventListener('submit', onSubmit);\n\nfunction onSubmit(evt) {\n  evt.preventDefault();\n\n  const { delay, step, amount } = evt.currentTarget.elements;\n  console.log(delay.value, step.value, amount.value);\n  const arr = new Array(Number(amount.value))\n    .fill(Number(delay.value))\n    .map((p, i, a) => (i ? a[i - 1] + Number(step.value) : p));\n  console.log(arr);\n\n  evt.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) resolve(`Fulfilled promise ${position} in ${delay}ms`);\n    else reject(`Rejected promise ${position} in ${delay}ms`);\n  });\n}\n\nfunction onFulfilled(message) {\n  Notify.success(message);\n}\n\nfunction onRejected(message) {\n  Notify.failure(message);\n}\n\n// promise.then(onFulfilled).catch(onRejected);\n"],"names":["parcelRequire","document","querySelector","addEventListener","evt","preventDefault","delay","step","amount","currentTarget","elements","console","log","value","arr","Array","Number","fill","map","p","i","a","reset"],"version":3,"file":"03-promises.1382206c.js.map"}